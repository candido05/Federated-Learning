#!/usr/bin/env python3
"""
Script mestre para executar TODOS os experimentos
XGBoost, LightGBM e CatBoost com estrat√©gias Cyclic e Bagging
"""

import sys
import time
from common import DataProcessor
from algorithms import run_xgboost_experiment, run_lightgbm_experiment, run_catboost_experiment


def main():
    """Executa todos os experimentos de todos os algoritmos"""

    # Configura√ß√µes do experimento
    NUM_CLIENTS = 6
    NUM_SERVER_ROUNDS = 3
    NUM_LOCAL_BOOST_ROUND = 20
    SAMPLE_PER_CLIENT = 8000
    SEED = 42

    print("\n" + "="*80)
    print("EXECU√á√ÉO COMPLETA DE TODOS OS EXPERIMENTOS")
    print("XGBoost, LightGBM, CatBoost √ó Cyclic, Bagging = 6 experimentos")
    print("="*80)
    print(f"\nConfigura√ß√£o:")
    print(f"  - N√∫mero de clientes: {NUM_CLIENTS}")
    print(f"  - Rodadas globais: {NUM_SERVER_ROUNDS}")
    print(f"  - Rodadas locais: {NUM_LOCAL_BOOST_ROUND}")
    print(f"  - Amostras por cliente: {SAMPLE_PER_CLIENT}")
    print(f"  - Seed: {SEED}")
    print("="*80)

    # Preparar dados (uma √∫nica vez para todos os experimentos)
    print("\nüìä Carregando e preparando dataset HIGGS...")
    data_processor = DataProcessor(
        num_clients=NUM_CLIENTS,
        sample_per_client=SAMPLE_PER_CLIENT,
        seed=SEED
    )
    data_processor.load_and_prepare_data()
    print("‚úÖ Dataset preparado!\n")

    # Definir todos os experimentos
    experiments = [
        ("xgboost", "cyclic", run_xgboost_experiment),
        ("xgboost", "bagging", run_xgboost_experiment),
        ("lightgbm", "cyclic", run_lightgbm_experiment),
        ("lightgbm", "bagging", run_lightgbm_experiment),
        ("catboost", "cyclic", run_catboost_experiment),
        ("catboost", "bagging", run_catboost_experiment),
    ]

    results = {}
    failed = []
    start_time_total = time.time()

    # Executar todos os experimentos
    for idx, (algorithm, strategy, run_func) in enumerate(experiments, 1):
        exp_name = f"{algorithm}_{strategy}"

        print(f"\n{'#'*80}")
        print(f"# EXPERIMENTO {idx}/{len(experiments)}: {algorithm.upper()} - {strategy.upper()}")
        print(f"{'#'*80}\n")

        try:
            exp_start = time.time()

            result = run_func(
                data_processor=data_processor,
                num_clients=NUM_CLIENTS,
                num_server_rounds=NUM_SERVER_ROUNDS,
                num_local_boost_round=NUM_LOCAL_BOOST_ROUND,
                train_method=strategy,
                seed=SEED
            )

            exp_elapsed = time.time() - exp_start

            if result is not None:
                results[exp_name] = result
                print(f"\n‚úÖ Experimento {exp_name} CONCLU√çDO! ({exp_elapsed:.2f}s)")
            else:
                failed.append(exp_name)
                print(f"\n‚ùå Experimento {exp_name} falhou (resultado None)")

        except Exception as e:
            failed.append(exp_name)
            print(f"\n‚ùå ERRO no experimento {exp_name}: {e}")
            import traceback
            traceback.print_exc()

    # Resumo final
    elapsed_total = time.time() - start_time_total

    print("\n\n" + "="*80)
    print("RESUMO FINAL DA EXECU√á√ÉO")
    print("="*80)
    print(f"\n‚úÖ Experimentos conclu√≠dos: {len(results)}/{len(experiments)}")
    print(f"‚ùå Experimentos falhados: {len(failed)}/{len(experiments)}")
    print(f"‚è±Ô∏è  Tempo total: {elapsed_total:.2f} segundos ({elapsed_total/60:.2f} minutos)")

    if results:
        print("\nüìä Experimentos executados com sucesso:")
        for exp_name in sorted(results.keys()):
            print(f"   ‚úì {exp_name}")

        print("\nüìÅ Estrutura de logs:")
        print("   logs/")
        print("   ‚îú‚îÄ‚îÄ xgboost/")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ YYYYMMDD_HHMMSS_cyclic/")
        print("   ‚îÇ   ‚îî‚îÄ‚îÄ YYYYMMDD_HHMMSS_bagging/")
        print("   ‚îú‚îÄ‚îÄ lightgbm/")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ YYYYMMDD_HHMMSS_cyclic/")
        print("   ‚îÇ   ‚îî‚îÄ‚îÄ YYYYMMDD_HHMMSS_bagging/")
        print("   ‚îî‚îÄ‚îÄ catboost/")
        print("       ‚îú‚îÄ‚îÄ YYYYMMDD_HHMMSS_cyclic/")
        print("       ‚îî‚îÄ‚îÄ YYYYMMDD_HHMMSS_bagging/")
        print("\n   Cada pasta cont√©m:")
        print("   - execution_log.txt: Log completo com m√©tricas")
        print("   - metrics.json: Dados estruturados em JSON")
        print("   - README.md: Resumo do experimento")

    if failed:
        print(f"\n‚ùå Experimentos falhados:")
        for exp_name in failed:
            print(f"   ‚úó {exp_name}")

    print("\n" + "="*80)
    if len(results) == len(experiments):
        print("üéâ TODOS OS EXPERIMENTOS CONCLU√çDOS COM SUCESSO!")
    elif len(results) > 0:
        print(f"‚ö†Ô∏è  EXECU√á√ÉO PARCIAL: {len(results)}/{len(experiments)} experimentos conclu√≠dos")
    else:
        print("‚ùå FALHA TOTAL: Nenhum experimento foi conclu√≠do!")
        return 1
    print("="*80 + "\n")

    return 0


if __name__ == "__main__":
    sys.exit(main())
